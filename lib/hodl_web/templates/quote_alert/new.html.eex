
<%= csrf_meta_tag() %>
<script src="https://unpkg.com/vue-tel-input"></script>
<link rel="stylesheet" href="<%= Routes.static_path(@conn, "/css/intlTelInput.min.css") %>" >
<style>
.iti__flag {background-image: url( "<%= Routes.static_path(@conn, "/img/flags.png") %>";}

@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
  .iti__flag {background-image: url("<%= Routes.static_path(@conn, "/img/flags@2x.png") %>");}
}
</style>
<div id="app_basic" class="container">

<b-form @submit="onSubmit">
<b-button size="lg" v-on:click="change_alert_type('price_alert')" squared v-bind:variant="price_button_variant">$</b-button>
<b-button  size="lg" v-on:click="change_alert_type('percentage_alert')" squared v-bind:variant="percentage_button_variant">%</b-button>
<h1>New Email alert</h1>


Current coin: <b-form-select v-model="selected" :options="options"></b-form-select> Current price: {{show_price}} USD  <br> <br>

<div v-if="render_price"style="white-space: nowrap">
    <h4 style="display: inline-block"> Alert when {{options[selected].name}} is above:</h4>
    <input type="text" style="width: 150px;" v-model="user_above_price"> USD
<br>
        <h4 style="display: inline-block"> Alert when {{options[selected].name}} is below: </h4>
    <input type="text" style="width: 150px;" v-model="user_below_price"> USD
</div>

<div style="white-space: nowrap" v-else>
    <h4 style="display: inline-block"> Alert when price increases by:</h4>
    <input type="text" style="width: 150px;" v-model="user_above_percentage"> % from now
<br>
        <h4 style="display: inline-block"> Alert when price decreases by: </h4>
    <input type="text" style="width: 150px;" v-model="user_below_percentage"> % from now
</div>
<div style="white-space: nowrap">
 <h4 style="display: inline-block"> Get SMS alert as well </h4>
<b-form-checkbox style="display: inline-block" v-on:change="check_plan" v-model="sms_check" name="check-button" switch>
    </b-form-checkbox>
    <div v-if="sms_check">
    Cellphone number:          {{local_phone_number}} <button v-on:click="open_phone_modal"> Edit </button>
  </div>
    </div>


<input type="submit" value="Create alert">
</b-form>


    <b-modal ref="my-modal" aria-label="Your alert was created successfully" ok-only="true"  hide-backdrop hide-header button-size="sm" >
      <div class="d-block text-center">
        <h5>Your alert was created successfully</h5>
      </div>
      </b-modal>

        <b-modal ref="fail-modal" aria-label="The alert can't be created as you're already using all in your plan!" ok-only="true"  hide-backdrop hide-header button-size="sm" >
      <div class="d-block text-center">
        <br>
        <h5>The alert can't be created as you're already using all available in your plan!</h5>
        <h5> Delete an alert to create a new one or upgrade to Platinum. </h5>
      </div>
      </b-modal>

              <b-modal ref="fail-sms-modal" aria-label="The alert can't be created as you're already using all in your plan!" ok-only="true"  hide-backdrop hide-header button-size="sm" >
      <div class="d-block text-center">
        <br>
        <h5>The alert can't be created because you haven't inserted your phone number</h5>
      </div>
      </b-modal>

        <b-modal ref="modal-no-backdrop" id="modal-no-backdrop" hide-backdrop content-class="shadow" title="Platinum required">
    <p class="my-2">
     Platinum subscribers get up to 100 sms messages per month and unlimited email alerts.
     <a href="/get-platinum"> Get platinum </a>
    </p>
  </b-modal>


<%= output_alerts(@quotealerts) %>
</div>

<button id="modal-btn"> click me, I make a modal</button><div class="modal">
  <div class="modal-content">
    <span class="close-btn">&times;</span>
    <h3> Your cellphone: </h3>
    <input type="tel" id="phone">
    <button onclick="save_phone_number()"> Save </button>
  </div>
</div>

<style>
.modal {
  display: none;
  position: fixed;
  padding-top: 50px;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgb(0, 0, 0);
  background-color: rgba(0, 0, 0, 0.5);
}.modal-content {
  position: relative;
  background-color: white;
  padding: 20px;
  margin: auto;
  width: 75%;
  -webkit-animation-name: animatetop;
  -webkit-animation-duration: 0.4s;
  animation-name: animatetop;
  animation-duration: 0.4s
}.close-btn {
  float: right;
  color: lightgray;
  font-size: 24px;
  font-weight: bold;
}.close-btn:hover {
  color: darkgray;
}@-webkit-keyframes animatetop {
  from {top:-300px; opacity:0}
  to {top:0; opacity:1}
}@keyframes animatetop {
  from {top:-300px; opacity:0}
  to {top:0; opacity:1}
}
</style>

<script>
let modalBtn = document.getElementById("modal-btn")
let modal = document.querySelector(".modal")
let closeBtn = document.querySelector(".close-btn")
modalBtn.onclick = function(){
  modal.style.display = "block"
}
closeBtn.onclick = function(){
  modal.style.display = "none"
}
window.onclick = function(e){
  if(e.target == modal){
    modal.style.display = "none"
  }
}
</script>


<span><%= link "Back", to: Routes.quote_alert_path(@conn, :index) %></span>

<script src="<%= Routes.static_path(@conn, "/js/utils.js") %>"> </script>
<script src="<%= Routes.static_path(@conn, "/js/intlTelInput.js") %>"></script>

<script>
var app = new Vue({
    el: '#app_basic',
    data: function(){
        return {
            selected: null,
            hello: "world",
            options: [],
            user_alert_price: null,
            user_above_price: null,
            user_below_price: null,
            user_above_percentage: null,
            user_below_percentage: null,
            alert_type: "price_alert",
            csrf_token: null,
            loading: true,
            show_price: '',
            alert_types: [
              { text: '$', value: 'price_alert' },
              { text: '%', value: 'percentage_alert' }
            ],
            percentage_button_variant: 'outline-primary',
            price_button_variant: 'primary',
            sms_check: false,
            tel_value: '',
            bindProps: {
              mode: 'international'
            },
            local_phone_number: 'You need to insert a phone number',
            user_plan: '',

        }
    },
    created: function (){
        get_top_coins();
        let csrf_token = document.querySelector('meta[name="csrf-token"]').content;
        this.csrf_token = csrf_token;
        get_user_details();
    },
    methods: {
        onSubmit(event){
            event.preventDefault();
            if(this.sms_check == true && this.local_phone_number == 'You need to insert a phone number'){
              this.$refs['fail-sms-modal'].show()
            } else{
            create_quote_alert();
            }
        },
        prevent_submit(event){
          event.preventDefault();
        },
        showModal() {
        this.$refs['my-modal'].show()
      },
       show_fail_modal(){
        this.$refs['fail-modal'].show()
       },
      hideModal() {
        this.$refs['my-modal'].hide()
      },

      showplatinumModal() {
        this.$refs['modal-no-backdrop'].show()
      },

      change_alert_type(alert_type){
        if(alert_type == "price_alert"){
          this.alert_type = "price_alert"
          this.price_button_variant = "primary"
          this.percentage_button_variant = "outline-primary"
        } else {
          this.alert_type = "percentage_alert"
          this.price_button_variant = "outline-primary"
          this.percentage_button_variant = "primary"
        }
      },
      open_phone_modal(e){
        e.preventDefault();
        let modal = document.querySelector(".modal")
        modal.style.display = "block"
      },
      check_plan(){
        if(this.user_plan == 'free'){
          this.showplatinumModal();
          if(this.sms_check == true){
            this.sms_check = false;
          }
        }
      }
    },

    computed: {
      render_price: function(){
        if(this.alert_type == "price_alert"){
          return true;
        } else{
          return false;
        }
      }
    },
    watch: {
        selected: function(){
            let price = parseFloat(this.options[this.selected]["price_usd"])


            if(price < 0.001) {
              this.user_alert_price = price.toFixed(5)
            } else {
              if(price < 1) {
                this.user_alert_price = price.toFixed(3)
                this.show_price = price.toFixed(7)
              } else {
              this.show_price = price.toFixed(2)
              this.user_alert_price = ''
              }
            }

        }

    }
})

  function prepare_for_sending(params) {
     /* Use either price or percentage for the alert */
    if(app.alert_type == "price_alert"){
      params.above_price = app.user_above_price;
      params.below_price = app.user_below_price;
    }
    if(app.alert_type == "percentage_alert"){
      params.above_percentage = app.user_above_percentage;
      params.below_percentage = app.user_below_percentage;
      let price = parseFloat(app.options[app.selected]["price_usd"])
      params.base_price = price;
    }
    if(app.sms_check == true){
      params.phone_number = telinput.getNumber();
    }

    return params;

  }

  function create_quote_alert() {
    let csrf_token = document.querySelector('meta[name="csrf-token"]').content;

    let base_url = "<%= Routes.quote_alert_url(@conn, :create) %>" ;
    let url = base_url
    let data = {}
    data._csrf_token = csrf_token;
    let quote_alert = {coin_uuid: app.options[app.selected]["uuid"], base_coin_name: "US Dollar"};
    data.quote_alert = prepare_for_sending(quote_alert);

    let json = JSON.stringify(data);

    let xhr = new XMLHttpRequest();
    xhr.open("POST", url, true);
    xhr.setRequestHeader('Content-type','application/json; charset=utf-8');
    xhr.onload = function () {
	  let response = JSON.parse(xhr.responseText);
     console.log(response)
      if (xhr.status == "201") {
        console.log("quote alert created!")
        app.showModal()
      }
      else if(xhr.status == "409"){
        console.log("quote alert wasn't created because the user don't have any remaining alerts left")
        app.show_fail_modal()
      }
       else {
        console.log("quote alert wasn't created!");
      }
      }
      xhr.send(json);

  }

function get_top_coins(){
      let json = JSON.stringify({});
      let xhr = new XMLHttpRequest();
      xhr.open("GET", "/top-coins", true);
      xhr.setRequestHeader('Content-type','application/json; charset=utf-8');
      xhr.onload = function () {
	    let response = JSON.parse(xhr.responseText);
        console.log(response)
        let arr = [{value: null, text: "Select a coin for your alert"}]
        let coins = arr.concat(response.coins)
        for (i = 1; i < 101; i++){
            coins[i]["text"] = coins[i]["name"]
            coins[i]["value"] = i
        }

      if (xhr.status == "200") {
        console.log("Got coins! wow")
        app.options =  coins;
        app.selected = 1;
        app.user_alert_price = app.options[1]["price_usd"]

      } else {
        console.log("No coins :(")
        }
      }
      xhr.send(json);
}

function get_user_details(){
      let user_uuid = "<%= @conn.assigns.current_user.uuid %>"
      let base_url = "/user-info/"
      let final_url = base_url + user_uuid
      let json = JSON.stringify({});
      let xhr = new XMLHttpRequest();
      xhr.open("GET", final_url, true);
      xhr.setRequestHeader('Content-type','application/json; charset=utf-8');
      xhr.onload = function () {
	    let response = JSON.parse(xhr.responseText);
        console.log(response)

      if (xhr.status == "200") {
        console.log("Got user details! wow")
        app.user_plan = response.current_plan
        if(response.phone_number != "no phone number inserted") {
          app.local_phone_number = response.phone_number;
          telinput.setNumber(response.phone_number);
        }
      } else {
        console.log("No coins :(")
        }
      }
      xhr.send(json);
}

const input = document.querySelector("#phone");
var telinput = intlTelInput(input, {
    utilScript: "<%= Routes.static_path(@conn, "/js/utils.js") %>"
});

function save_phone_number(){
  let number_str = telinput.getNumber()
  app.local_phone_number = number_str;
  let modal = document.querySelector(".modal")
  modal.style.display = "none"
}
</script>
