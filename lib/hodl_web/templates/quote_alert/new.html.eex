
<%= csrf_meta_tag() %>
<div id="app_basic" class="container">


<b-form @submit="onSubmit">
<h1>New Price alert</h1>
Current coin: <b-form-select v-model="selected" :options="options"></b-form-select> Current price: {{show_price}} USD  <br> <br>
<div style="white-space: nowrap">
    <h4 style="display: inline-block">I want to be notified when {{options[selected].name}} is </h4>
    <b-form-select v-model="comparator" :options="comparator_options"></b-form-select>
    <input type="text" style="width: 150px;" v-model="user_alert_price"> USD
</div>

<input type="submit" value="Create alert">
</b-form>


    <b-modal ref="my-modal" aria-label="Your alert was created successfully" ok-only="true"  hide-backdrop hide-header button-size="sm" >
      <div class="d-block text-center">
        <h5>Your alert was created successfully</h5>
      </div>
      </b-modal>

        <b-modal ref="fail-modal" aria-label="The alert can't be created as you're already using all in your plan!" ok-only="true"  hide-backdrop hide-header button-size="sm" >
      <div class="d-block text-center">
        <br>
        <h5>The alert can't be created as you're already using all available in your plan!</h5>
        <h5> Delete an alert to create a new one or upgrade to Platinum. </h5>
      </div>
      </b-modal>


<%= output_alerts(@quotealerts) %>
</div>

<span><%= link "Back", to: Routes.quote_alert_path(@conn, :index) %></span>

<script>

var app = new Vue({
    el: '#app_basic',
    data: function(){
        return {
            selected: null,
            hello: "world",
            options: [],
            user_alert_price: null,
            comparator_options: ["equal or greater than", "lower than"],
            comparator: "equal or greater than",
            csrf_token: null,
            loading: true,
            show_price: ''
        }
    },
    created: function (){
        get_top_coins();
        let csrf_token = document.querySelector('meta[name="csrf-token"]').content;
        this.csrf_token = csrf_token;
    },
    methods: {
        onSubmit(event){
            event.preventDefault();
            create_quote_alert();
        },
        showModal() {
        this.$refs['my-modal'].show()
      },
       show_fail_modal(){
        this.$refs['fail-modal'].show()
       },
      hideModal() {
        this.$refs['my-modal'].hide()
      },
    },
    watch: {
        selected: function(){
            let price = parseFloat(this.options[this.selected]["price_usd"])


            if(price < 0.001) {
              this.user_alert_price = price.toFixed(5)
            } else {
              if(price < 1) {
                this.user_alert_price = price.toFixed(3)
                this.show_price = price.toFixed(7)
              } else {
              this.show_price = price.toFixed(2)
              this.user_alert_price = ''
              }
            }

        }

    }
})

  function create_quote_alert() {
    let csrf_token = document.querySelector('meta[name="csrf-token"]').content;

    let base_url = "<%= Routes.quote_alert_url(@conn, :create) %>" ;
    let url = base_url
    let data = {}
    data._csrf_token = csrf_token;
    let quote_alert = {comparator: app.comparator, price_usd: app.user_alert_price, coin_uuid: app.options[app.selected]["uuid"]};
    data.quote_alert = quote_alert;

    let json = JSON.stringify(data);

    let xhr = new XMLHttpRequest();
    xhr.open("POST", url, true);
    xhr.setRequestHeader('Content-type','application/json; charset=utf-8');
    xhr.onload = function () {
	  let response = JSON.parse(xhr.responseText);
     console.log(response)
      if (xhr.status == "201") {
        console.log("quote alert created!")
        app.showModal()
      }
      if(xhr.status == "409"){
        console.log("quote alert wasn't created because the user don't have any left")
        app.show_fail_modal()
      }
       else {
        console.log("quote alert wasn't created!");
      }
      }
      xhr.send(json);

  }

function get_top_coins(){
      let json = JSON.stringify({});
      let xhr = new XMLHttpRequest();
      xhr.open("GET", "/top-coins", true);
      xhr.setRequestHeader('Content-type','application/json; charset=utf-8');
      xhr.onload = function () {
	    let response = JSON.parse(xhr.responseText);
        console.log(response)
        let arr = [{value: null, text: "Select a coin for your alert"}]
        let coins = arr.concat(response.coins)
        for (i = 1; i < 101; i++){
            coins[i]["text"] = coins[i]["name"]
            coins[i]["value"] = i
        }

      if (xhr.status == "200") {
        console.log("Got coins! wow")
        app.options =  coins;
        app.selected = 1;
        app.user_alert_price = app.options[1]["price_usd"]

      } else {
        console.log("No coins :(")
        }
      }
      xhr.send(json);
}
</script>
