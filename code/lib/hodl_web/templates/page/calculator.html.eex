<script src="https://unpkg.com/mathjs@9.2.0/lib/browser/math.js" type="text/javascript"></script>

<div id="app_basic" class="container">
<h2> Create a Hodl Schedule </h2>
<b-form>
<b-form-select v-model="selected" :options="options"></b-form-select>

<template v-if="selected">
<br>
<p> How much {{options[selected].name}} do you own? </p>
<b-form-input v-model="amount"> </b-form-input>
{{amount}} {{options[selected].symbol}}

<template v-if="amount">
<b-table :items="table_items" :fields="fields">
</b-table>
</template>

</template>

</b-form>
<script>
var app = new Vue(
    {
        el: '#app_basic',
        data: function(){
           
            return {
            selected: null,
            amount: "",
            fields: ["coins_available_after_sell", "sell_percentage", "amount_to_sell", "price_per_coin", "gains_after_sell", "accumulated_gains_so_far", "paper_net_worth"],
            items: [
                {},
                {},
                {}
            ],
            sell_percentage: 0.2,
            options: false,
            cycle_store: []
            }
        },
        created: function (){
            get_top_coins();
        },
        computed: {
            table_items: function() {
                let cycles = this.create_cycles(this.amount, this.coin_price)
                return cycles;
                            },
            coin_price: function(){
                let i = this.selected;
                return this.options[i]["price_usd"]
            }
        },
        methods: {
            create_cycle: function(coin_amount, price_per_coin, sell_percentage, accumulated_gains) {
                
                let sell_percetange_str = math.chain(sell_percentage).multiply(100).done() + "%"
                let coin_worth = math.chain(coin_amount).multiply(price_per_coin).round(2).done()
                let paper_net_worth = math.chain(coin_worth).add(accumulated_gains).round(2).done()
                
                let coins_to_sell = math.evaluate(coin_amount * sell_percentage)
                let coins_after_sell = math.evaluate(coin_amount - coins_to_sell)
                let gains_for_sale = math.chain(coins_to_sell).multiply(price_per_coin).round(2).done();
                let accumulated_gains_so_far = math.chain(accumulated_gains).add(gains_for_sale).round(2).done();

                let price_per_coin_str = price_per_coin.toLocaleString()
                let paper_net_worth_str = paper_net_worth.toLocaleString()
                let gains_for_sale_str = gains_for_sale.toLocaleString()
                let accumulated_gains_so_far_str = accumulated_gains_so_far.toLocaleString()

                let cycle = {
                        coin_amount: coin_amount,
                        coins_available_after_sell: coins_after_sell,
                        sell_percentage_num: sell_percentage,
                        sell_percentage: sell_percetange_str, 
                        amount_to_sell: coins_to_sell,
                        price_per_coin_num: price_per_coin,
                        price_per_coin: price_per_coin_str,
                        gains_after_sell_num: gains_for_sale,
                        gains_after_sell: gains_for_sale_str,
                        accumulated_gains_so_far_num: accumulated_gains_so_far,
                        accumulated_gains_so_far: accumulated_gains_so_far_str,
                        paper_net_worth: paper_net_worth_str
                    }
                return(cycle);
            },
            create_cycles: function(initial_coin_amount, price_per_coin) {
                price_per_coin = math.round(price_per_coin,2)
                let first_cycle = this.create_cycle(initial_coin_amount, price_per_coin, 0, 0)
                price_per_coin = math.chain(price_per_coin).multiply(10).round(2).done()
                let second_cycle = this.create_cycle(initial_coin_amount, price_per_coin, 0, 0)
                price_per_coin = math.chain(price_per_coin).multiply(10).round(2).done()
                let cycles = []

                cycles.push(first_cycle);
                cycles.push(second_cycle);

                let paper;  
                let coin_amount = initial_coin_amount
                let new_price_per_coin = price_per_coin
                let coins_to_sell;
                let accumulated_gains = 0;
                let gains_on_this_cycle;
                for (i = 1; i < 4; i++){
                    let new_cycle = this.create_cycle(coin_amount, new_price_per_coin, this.sell_percentage, accumulated_gains)
                    cycles.push(new_cycle)
                    coin_amount = new_cycle.coins_available_after_sell
                    accumulated_gains = new_cycle.accumulated_gains_so_far_num

                    new_price_per_coin = math.chain(10).multiply(new_price_per_coin).round(2).done()
                    
                }
                this.cycle_store = cycles;
                return cycles
            }
        }
    }
);

function get_top_coins(){
      let json = JSON.stringify({});
      let xhr = new XMLHttpRequest();
      xhr.open("GET", "/top-coins", true);
      xhr.setRequestHeader('Content-type','application/json; charset=utf-8');
      xhr.onload = function () {
	    let response = JSON.parse(xhr.responseText);
        console.log(response)
        let arr = [{value: null, text: "Select a coin to hodl"}]
        let coins = arr.concat(response.coins)
        for (i = 1; i < 101; i++){
            coins[i]["text"] = coins[i]["name"]
            coins[i]["value"] = i
        }

      if (xhr.status == "200") {
        console.log("Got coins! wow")
        app.options =  coins;

      } else {
        console.log("No coins :(")
        }
      }
      xhr.send(json);
}

function create_schedule(){
      let json = JSON.stringify({});
      let xhr = new XMLHttpRequest();
      xhr.open("POST", "/top-coins", true);
      xhr.setRequestHeader('Content-type','application/json; charset=utf-8');
      xhr.onload = function () {
	    let response = JSON.parse(xhr.responseText);
        console.log(response)
        let arr = [{value: null, text: "Select a coin to hodl"}]
        let coins = arr.concat(response.coins)
        for (i = 1; i < 101; i++){
            coins[i]["text"] = coins[i]["name"]
            coins[i]["value"] = i
        }

      if (xhr.status == "200") {
        console.log("Got coins! wow")
        app.options =  coins;

      } else {
        console.log("The schedule wasnt created :(")
        }
      }
      xhr.send(json);
}
</script>
